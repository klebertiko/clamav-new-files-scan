package main

import (
	"flag"
	"fmt"
	_ "image/png"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
)

func execBashPipedCommand(command string) ([]byte, error) {
	return exec.Command("bash", "-c", command).CombinedOutput()
}

func installClamAV() {
	outClamd, _ := execBashPipedCommand("command -v clamd")
	outClamdscan, _ := execBashPipedCommand("command -v clamdscan")
	if string(outClamd) == "" || string(outClamdscan) == "" {
		log.Println("No clamav found! Installing clamav and clamav-daemon...")
		_, err := execBashPipedCommand("apt install -y clamav clamav-daemon clamtk")
		if err != nil {
			execBashPipedCommand("apt purge -y clamav clamav-daemon")
			log.Fatal(err)
		}
	} else {
		log.Println("Clamav found! Updating...")
		_, err := execBashPipedCommand("apt update -y && apt upgrade -y")
		if err != nil {
			log.Fatal(err)
		}
	}
}

func refreshClamAVVirusDatabase() {
	log.Println("Refreshing virus database...")
	execBashPipedCommand("freshclam")
}

func configureClamAVDaemon() {
	log.Println("Configuring ClamAV Daemon...")
	content := fmt.Sprintf(`#Automatically Generated by clamav-daemon postinst
        #To reconfigure clamd run #dpkg-reconfigure clamav-daemon
        #Please read /usr/share/doc/clamav-daemon/README.Debian.gz for details
        LocalSocket /var/run/clamav/clamd.ctl
        FixStaleSocket true
        LocalSocketGroup %s
        LocalSocketMode 666
        # TemporaryDirectory is not set to its default /tmp here to make overriding
        # the default with environment variables TMPDIR/TMP/TEMP possible
        User %s
        ScanMail true
        ScanArchive true
        ArchiveBlockEncrypted false
        MaxDirectoryRecursion 15
        FollowDirectorySymlinks false
        FollowFileSymlinks false
        ReadTimeout 180
        MaxThreads 12
        MaxConnectionQueueLength 15
        LogSyslog false
        LogRotate true
        LogFacility LOG_LOCAL6
        LogClean false
        LogVerbose false
        PreludeEnable no
        PreludeAnalyzerName ClamAV
        DatabaseDirectory /var/lib/clamav
        OfficialDatabaseOnly false
        SelfCheck 3600
        Foreground false
        Debug false
        ScanPE true
        MaxEmbeddedPE 10M
        ScanOLE2 true
        ScanPDF true
        ScanHTML true
        MaxHTMLNormalize 10M
        MaxHTMLNoTags 2M
        MaxScriptNormalize 5M
        MaxZipTypeRcg 1M
        ScanSWF true
        DetectBrokenExecutables false
        ExitOnOOM false
        LeaveTemporaryFiles false
        AlgorithmicDetection true
        ScanELF true
        IdleTimeout 30
        CrossFilesystems true
        PhishingSignatures true
        PhishingScanURLs true
        PhishingAlwaysBlockSSLMismatch false
        PhishingAlwaysBlockCloak false
        PartitionIntersection false
        DetectPUA false
        ScanPartialMessages false
        HeuristicScanPrecedence false
        StructuredDataDetection false
        CommandReadTimeout 5
        SendBufTimeout 200
        MaxQueue 100
        ExtendedDetectionInfo true
        OLE2BlockMacros false
        ScanOnAccess false
        AllowAllMatchScan true
        ForceToDisk false
        DisableCertCheck false
        DisableCache false
        MaxScanSize 100M
        MaxFileSize 25M
        MaxRecursion 16
        MaxFiles 10000
        MaxPartitions 50
        MaxIconsPE 100
        PCREMatchLimit 10000
        PCRERecMatchLimit 5000
        PCREMaxFileSize 25M
        ScanXMLDOCS true
        ScanHWP3 true
        MaxRecHWP3 16
        StreamMaxLength 25M
        LogFile /var/log/clamav/clamav.log
        LogTime true
        LogFileUnlock false
        LogFileMaxSize 0
        Bytecode true
        BytecodeSecurity TrustSigned
        BytecodeTimeout 60000`, "root", "root")

	fileContent := []byte(content)
	err := ioutil.WriteFile("/etc/clamav/clamd.conf", fileContent, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

func configureScanService(scanDir string) {
	log.Println("Configuring goclamd-scan service...")
	content := fmt.Sprintf(`[Unit]
        Description=ClamAV On Access Scan
        After=network.target
        StartLimitIntervalSec=0
        
        [Service]
        Type=simple
        Restart=always
        RestartSec=1
        User=root
        ExecStart=/opt/clamav/goclamd-scan --scan-dir %s
        
        [Install]
        WantedBy=multi-user.target`, scanDir)

	fileContent := []byte(content)
	err := ioutil.WriteFile("/etc/systemd/system/goclamd-scan.service", fileContent, 0644)
	if err != nil {
		log.Fatal(err)
	}

	execBashPipedCommand("cp goclamd-scan /opt/clamav")
	execBashPipedCommand("chmod +x /opt/clamav/goclamd-scan")
	execBashPipedCommand("systemctl daemon-reload")
	execBashPipedCommand("systemctl enable goclamd-scan.service")
	execBashPipedCommand("systemctl start goclamd-scan.service")
}

func main() {
	/*err := ui.Main(func() {
		newVerticalBox := ui.NewVerticalBox()
		newVerticalBox.Append(ui.NewLabel("Installer for goclamd-scan\n"), false)

		newVerticalBox.Append(ui.NewLabel("Please insert the directory to be scanned:"), false)
		scanDirEntry := ui.NewEntry()

		feedbackLabel := ui.NewLabel("")

		installButton := ui.NewButton("Install")

		newVerticalBox.Append(scanDirEntry, false)
		newVerticalBox.Append(ui.NewLabel(""), false)
		newVerticalBox.Append(installButton, false)
		newVerticalBox.Append(feedbackLabel, false)

		installButton.OnClicked(func(*ui.Button) {
			scanDir := scanDirEntry.Text()
			if scanDir != "" {
				installClamAV()
				refreshClamAVVirusDatabase()
				configureClamAVDaemon()
				configureScanService(scanDir)
			}
		})

		window := ui.NewWindow("GoClamD-Scan installer", 800, 240, false)
		window.SetMargined(true)
		window.SetChild(newVerticalBox)
		window.OnClosing(func(*ui.Window) bool {
			ui.Quit()
			return true
		})
		window.Show()
	})
	if err != nil {
		panic(err)
	}*/

	scanDir := flag.String("scan-dir", "", "Directory to be scanned")
	flag.Parse()
	if *scanDir == "" {
		flag.PrintDefaults()
		os.Exit(1)
	}
	installClamAV()
	refreshClamAVVirusDatabase()
	configureClamAVDaemon()
	configureScanService(*scanDir)
}
